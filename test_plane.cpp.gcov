        -:    0:Source:tests/test_plane.cpp
        -:    0:Graph:test_plane.gcno
        -:    0:Data:test_plane.gcda
        -:    0:Runs:1
        -:    1:#include <cassert>
        -:    2:#include "../units/plane.hpp"
        -:    3:#include <cassert>
        -:    4:#include <iostream>
        -:    5:#include "../units/crew_members.hpp"
        -:    6:
        -:    7://g++ --coverage -g -O0 -fsanitize=address -std=c++2a     -Wall -Werror -Wextra units/plane.cpp     units/passengers.cpp units/crew_members.cpp     tests/test_plane.cpp -o test_plane
        -:    8:// ./test_plane
        -:    9:// gcov test_plane.cpp
        1:   10:void testLuggageValues(){
        -:   11:    
        1:   12:    int maxWeightEconomySegment = 100;
        1:   13:    int maxWeightBusinessSegment = 200;
        1:   14:    int maxWeightFirstClassSegment =300;
        2:   15:    Plane plane{maxWeightEconomySegment,maxWeightBusinessSegment,maxWeightFirstClassSegment};
       1*:   16:    assert (plane.getCurrentLuggageWeightEconomy() == 0);
       1*:   17:    assert (plane.getCurrentLuggageWeightBusiness() == 0);
       1*:   18:    assert (plane.getCurrentLuggageWeightFirstClass() == 0);
        -:   19:
        -:   20:    //добавим грузы новых пассажиров
        2:   21:    std::shared_ptr<Economy> econom = std::make_shared<Economy>(1,10,24);
        2:   22:    std::shared_ptr<Business> business = std::make_shared<Business>(2, 24,40);
        2:   23:    std::shared_ptr<FirstClass> firstClass = std::make_shared<FirstClass>(3, 60,100);
        1:   24:    plane.addPassenger(econom);
       1*:   25:    assert (plane.getCurrentLuggageWeightEconomy() == 34);
        -:   26:    
        1:   27:    plane.addPassenger(business);
       1*:   28:    assert (plane.getCurrentLuggageWeightBusiness() == 64 );
        -:   29:
        1:   30:    plane.addPassenger(firstClass);
       1*:   31:    assert (plane.getCurrentLuggageWeightFirstClass() == 160);
        -:   32:
       1*:   33:    assert ( plane.getTotalLuggageWeight() == (34+64+160));
        1:   34:}
        1:   35:void testAddLuggageLogic(){
        -:   36:
        -:   37:    // int maxWeightEconomySegment = 100;
        -:   38:    // int maxWeightBusinessSegment = 200;
        -:   39:    // int maxWeightFirstClassSegment =300;
        2:   40:    Plane plane1{1,1,1};
        -:   41:    
        -:   42:
        2:   43:    std::shared_ptr<Pilot> pilot = std::make_shared<Pilot>(1);
        2:   44:    std::shared_ptr<FlightAttendant> flightAttendant = std::make_shared<FlightAttendant>(2);
        -:   45:
       1*:   46:    assert ( plane1.addPassenger(pilot) == true);
       1*:   47:    assert ( plane1.addPassenger(flightAttendant) == true);
        -:   48:
        -:   49:
        -:   50:
        1:   51:    int maxWeightEconomySegment = 100;
        1:   52:    int maxWeightBusinessSegment = 50;
        1:   53:    int maxWeightFirstClassSegment =50;
        2:   54:    Plane plane2{maxWeightEconomySegment,maxWeightBusinessSegment,maxWeightFirstClassSegment};
        -:   55:
        1:   56:    plane2.addPassenger(std::make_shared<Economy>(3,10,24)); //34
        1:   57:    plane2.addPassenger(std::make_shared<Economy>(4,10,24)); //68
       1*:   58:    assert (plane2.addPassenger(std::make_shared<Economy>(5,10,24))==true); //102 > 100 -> пассажир добавится, но без багажа
       1*:   59:    assert ( plane2.getCurrentLuggageWeightEconomy()==(68+10) ); //78 , так как прошлый пассажир сел, но его багаж сняли
        -:   60:
        -:   61:    //теперь сажаем бизнес
       1*:   62:    assert (plane2.addPassenger(std::make_shared<Business>(6,24,27))==true); //51>50 -> переносим в эконом
       1*:   63:    assert (plane2.getCurrentLuggageWeightEconomy()==57); //здесь из-за бизнес пассажира ссадили 2 багажа 24+24 = 48, но добавили 27 ->78 - 48 + 27 = 57 в экономе
       1*:   64:    assert (plane2.getCurrentLuggageWeightBusiness() == 24); //24 кг -> теперь в бизнесе только ручная кладь пассажира
        -:   65:
        -:   66:    // assert (plane2.addPassenger(std::make_shared<Business>(7,20,0))==true); 
        -:   67:    // assert (plane2.getCurrentLuggageWeightBusiness() == 44); //теперь в бизнесе будет 44 кг
        -:   68:    // assert (plane2.addPassenger(std::make_shared<Business>(8,7,1))==false); //добавим бизнес пассажира, чтобы не поместилась ручная кладь 44+7 > 50 
        -:   69:    // assert (plane2.getCurrentLuggageWeightBusiness() == 44); // в бизнесе все также будет 44 кг
        -:   70:
        -:   71:
        -:   72:    // //теперь сажаем бизнес класс
        -:   73:    // assert (plane2.addPassenger(std::make_shared<FirstClass>(9,0,50))==true); //полностью забили допустимый вес
        -:   74:    // assert (plane2.addPassenger(std::make_shared<FirstClass>(9,1,0))==false); //теперь не можем посадить даже легкого пассажира
        1:   75:}   
        -:   76:
        -:   77:
        -:   78:
        -:   79:
        -:   80:
        -:   81:
        -:   82:
        1:   83:int main(){
        -:   84:
        -:   85:
        1:   86:     testLuggageValues();
        1:   87:     testAddLuggageLogic();
        -:   88:
        -:   89:
        1:   90:    std::cout<<"Plane tests passed"<<std::endl;
        -:   91:     
        1:   92:    return 0;
        -:   93:}
