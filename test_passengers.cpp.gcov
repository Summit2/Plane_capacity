        -:    0:Source:tests/test_passengers.cpp
        -:    0:Graph:./test_passengers.gcno
        -:    0:Data:./test_passengers.gcda
        -:    0:Runs:1
        -:    1:#include <cassert>
        -:    2:#include "../units/passengers.hpp"
        -:    3:#include <iostream>
        -:    4:#include <memory>
        -:    5:#include <cmath>
        -:    6:
        -:    7:
        -:    8:// g++ --coverage -g -O0 -fsanitize=address -std=c++2a     -Wall -Werror -Wextra units/passengers.cpp     tests/test_passengers.cpp -o     test_passengers
        1:    9:void testEconomy(){
        1:   10:    int idSmall=0,idLarge=1;
        1:   11:    int handLuggageSmall = 10, handLuggageLarge = 11;
        1:   12:    int luggageSmall = 24, luggageLarge = 25;
        2:   13:    std::unique_ptr<Economy> economySmallLuggage = std::make_unique<Economy>(idSmall, handLuggageSmall, luggageSmall);
       1*:   14:    assert (economySmallLuggage->getId() == idSmall);
       1*:   15:    assert ( economySmallLuggage->getHandLuggageWeight()==handLuggageSmall);
        -:   16:    // std::cout<<economySmallLuggage->getLuggageWeight()<<" " << luggageSmall<<std::endl;
       1*:   17:    assert (economySmallLuggage->getLuggageWeight()==luggageSmall);
       1*:   18:    assert (economySmallLuggage->getType() =="ECONOMY");
       1*:   19:    assert(economySmallLuggage->canAddHandLuggage() == true);
       1*:   20:    assert(economySmallLuggage->canAddLuggage() == true);
        -:   21:
        -:   22:
        2:   23:    std::unique_ptr<Economy> economyLargeLuggage = std::make_unique<Economy>(idLarge, handLuggageLarge, luggageLarge);
       1*:   24:    assert (economyLargeLuggage->getId() == idLarge);
       1*:   25:    assert ( economyLargeLuggage->getHandLuggageWeight()==handLuggageLarge);
       1*:   26:    assert (economyLargeLuggage->getLuggageWeight()==luggageLarge);
       1*:   27:    assert (economyLargeLuggage->getType() =="ECONOMY");
       1*:   28:    assert(economyLargeLuggage->canAddHandLuggage() == false);
       1*:   29:    assert(economyLargeLuggage->canAddLuggage() == false);
        -:   30:
        1:   31:};
        -:   32:
        1:   33:void testBusiness(){
        1:   34:    int idSmall=0,idLarge=1;
        1:   35:    int handLuggageSmall = 24, handLuggageLarge = 25;
        1:   36:    int luggageSmall = 40, luggageLarge = 41;
        2:   37:    std::unique_ptr<Business> businessSmallLuggage = std::make_unique<Business>(idSmall, handLuggageSmall, luggageSmall);
       1*:   38:    assert (businessSmallLuggage->getId() == idSmall);
       1*:   39:    assert ( businessSmallLuggage->getHandLuggageWeight()==handLuggageSmall);
       1*:   40:    assert (businessSmallLuggage->getLuggageWeight()==luggageSmall);
       1*:   41:    assert (businessSmallLuggage->getType() =="BUSINESS");
       1*:   42:    assert(businessSmallLuggage->canAddHandLuggage() == true);
       1*:   43:    assert(businessSmallLuggage->canAddLuggage() == true);
        -:   44:
        -:   45:
        2:   46:    std::unique_ptr<Business> businessLargeLuggage = std::make_unique<Business>(idLarge, handLuggageLarge, luggageLarge);
       1*:   47:    assert (businessLargeLuggage->getId() == idLarge);
       1*:   48:    assert ( businessLargeLuggage->getHandLuggageWeight()==handLuggageLarge);
       1*:   49:    assert (businessLargeLuggage->getLuggageWeight()==luggageLarge);
       1*:   50:    assert (businessLargeLuggage->getType() =="BUSINESS");
       1*:   51:    assert(businessLargeLuggage->canAddHandLuggage() == false);
       1*:   52:    assert(businessLargeLuggage->canAddLuggage() == false);
        -:   53:
        1:   54:};
        -:   55:
        1:   56:void testFirstClass(){
        1:   57:    int idSmall=0,idLarge=1;
        1:   58:    int handLuggageSmall = 60, handLuggageLarge = 61;
        1:   59:    int luggage = std::pow(2,10);
        2:   60:    std::unique_ptr<FirstClass> firstClassSmallLuggage = std::make_unique<FirstClass>(idSmall, handLuggageSmall, luggage);
       1*:   61:    assert (firstClassSmallLuggage->getId() == idSmall);
       1*:   62:    assert ( firstClassSmallLuggage->getHandLuggageWeight()==handLuggageSmall);
       1*:   63:    assert (firstClassSmallLuggage->getLuggageWeight()==luggage);
        -:   64:    // std::cout<<firstClassSmallLuggage->getType()<<std::endl;
       1*:   65:    assert (firstClassSmallLuggage->getType() == "FIRST CLASS");
       1*:   66:    assert(firstClassSmallLuggage->canAddHandLuggage() == true);
       1*:   67:    assert(firstClassSmallLuggage->canAddLuggage() == true);
        -:   68:
        -:   69:
        2:   70:    std::unique_ptr<FirstClass> firstClassLargeLuggage = std::make_unique<FirstClass>(idLarge, handLuggageLarge, luggage);
       1*:   71:    assert (firstClassLargeLuggage->getId() == idLarge);
       1*:   72:    assert ( firstClassLargeLuggage->getHandLuggageWeight()==handLuggageLarge);
       1*:   73:    assert (firstClassLargeLuggage->getLuggageWeight()==luggage);
       1*:   74:    assert (firstClassLargeLuggage->getType() == "FIRST CLASS" );
       1*:   75:    assert(firstClassLargeLuggage->canAddHandLuggage() == false);
       1*:   76:    assert(firstClassLargeLuggage->canAddLuggage() == true);
        -:   77:
        1:   78:};
        -:   79:
        -:   80:
        -:   81:
        1:   82:int main(){
        -:   83:
        -:   84:
        1:   85:     testEconomy();
        1:   86:     testBusiness();
        1:   87:     testFirstClass();
        -:   88:
        -:   89:
        1:   90:    std::cout<<"Passengers tests passed"<<std::endl;
        -:   91:     
        1:   92:    return 0;
        -:   93:}
